#!/usr/bin/env python3
"""
Utility for managing voice assistant commands
"""

import json
import os
import sys
from typing import Dict, Any

def load_commands(filename: str = 'commands.json') -> Dict[str, Any]:
    """Load commands from JSON file"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return {}

def save_commands(commands: Dict[str, Any], filename: str = 'commands.json'):
    """Save commands to JSON file"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(commands, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def list_commands(commands: Dict[str, Any]):
    """List all commands"""
    if not commands:
        print("üìù –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    total_commands = 0
    for category, category_commands in commands.items():
        print(f"\nüìÇ {category.upper()}:")
        for cmd, data in category_commands.items():
            description = data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            action = data.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            params = data.get('params', [])
            print(f"  üéØ {cmd}")
            print(f"     –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            if params:
                print(f"     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            total_commands += 1
    
    print(f"\nüìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}")

def add_command(commands: Dict[str, Any], category: str, command: str, action: str, params: list, description: str):
    """Add new command"""
    if category not in commands:
        commands[category] = {}
    
    commands[category][command] = {
        "action": action,
        "params": params,
        "description": description
    }
    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")

def remove_command(commands: Dict[str, Any], command: str):
    """Remove command"""
    for category in commands:
        if command in commands[category]:
            del commands[category][command]
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            return
    print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def search_command(commands: Dict[str, Any], query: str):
    """Search commands by query"""
    found = False
    for category, category_commands in commands.items():
        for cmd, data in category_commands.items():
            if query.lower() in cmd.lower() or query.lower() in data.get('description', '').lower():
                if not found:
                    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':")
                    found = True
                print(f"  üìÇ {category}: {cmd}")
                print(f"     {data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
    
    if not found:
        print(f"üîç –ö–æ–º–∞–Ω–¥—ã —Å '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_help():
    """Show help"""
    print("""
üé§ –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python manage_commands.py [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  list                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
  add <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–º–∞–Ω–¥–∞> <–¥–µ–π—Å—Ç–≤–∏–µ> <–ø–∞—Ä–∞–º–µ—Ç—Ä—ã> <–æ–ø–∏—Å–∞–Ω–∏–µ>
                          - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
  remove <–∫–æ–º–∞–Ω–¥–∞>        - –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
  search <–∑–∞–ø—Ä–æ—Å>         - –ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python manage_commands.py list
  python manage_commands.py add applications "–æ—Ç–∫—Ä–æ–π spotify" open_app ["Spotify"] "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Spotify"
  python manage_commands.py remove "–æ—Ç–∫—Ä–æ–π spotify"
  python manage_commands.py search "–±—Ä–∞—É–∑–µ—Ä"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
  - open_app: –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  - kill_process: –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
  - open_url: –æ—Ç–∫—Ä—ã—Ç—å URL
  - system_command: –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É
  - move_mouse: –¥–≤–∏–≥–∞—Ç—å –º—ã—à—å—é
  - click_mouse: –∫–ª–∏–∫–Ω—É—Ç—å –º—ã—à—å—é
  - say: –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
  - take_screenshot: —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
  - focus_mode: —Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞
  - timer_5_minutes: —Ç–∞–π–º–µ—Ä
""")

def main():
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    commands = load_commands()
    
    if command == 'list':
        list_commands(commands)
    
    elif command == 'add':
        if len(sys.argv) < 7:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: add <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–º–∞–Ω–¥–∞> <–¥–µ–π—Å—Ç–≤–∏–µ> <–ø–∞—Ä–∞–º–µ—Ç—Ä—ã> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
            return
        
        category = sys.argv[2]
        cmd = sys.argv[3]
        action = sys.argv[4]
        params_str = sys.argv[5]
        description = sys.argv[6]
        
        try:
            params = json.loads(params_str) if params_str != '[]' else []
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: [\"param1\", \"param2\"]")
            return
        
        add_command(commands, category, cmd, action, params, description)
        save_commands(commands)
    
    elif command == 'remove':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        cmd = sys.argv[2]
        remove_command(commands, cmd)
        save_commands(commands)
    
    elif command == 'search':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        query = sys.argv[2]
        search_command(commands, query)
    
    elif command == 'help':
        show_help()
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        show_help()

if __name__ == "__main__":
    main() 