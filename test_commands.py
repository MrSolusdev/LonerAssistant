#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""

import json
import sys
import os
from typing import Dict, Any

def load_commands() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('commands.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª commands.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return {}

def test_command_structure(commands: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥...")
    
    if not commands:
        print("‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return False
    
    required_fields = ["action", "params", "description"]
    valid_actions = [
        "open_app", "kill_process", "open_url", "system_command",
        "move_mouse", "click_mouse", "take_screenshot", "focus_mode",
        "say", "disable_commands", "enable_commands",
        "timer_5_minutes", "timer_10_minutes", "timer_30_minutes"
    ]
    
    valid_categories = [
        "applications", "close_applications", "websites", "system",
        "music", "mouse", "special", "assistant_control"
    ]
    
    errors = []
    total_commands = 0
    
    for category, category_commands in commands.items():
        if category not in valid_categories:
            errors.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        for command, data in category_commands.items():
            total_commands += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for field in required_fields:
                if field not in data:
                    errors.append(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è '{field}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if "action" in data and data["action"] not in valid_actions:
                errors.append(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data['action']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if "params" in data and not isinstance(data["params"], list):
                errors.append(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_commands} –∫–æ–º–∞–Ω–¥ –≤ {len(commands)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    
    if errors:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
        for error in errors:
            print(f"  {error}")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

def test_specific_commands(commands: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...")
    
    # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    important_commands = {
        "applications": ["–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä", "–æ—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª", "–æ—Ç–∫—Ä–æ–π –∫–æ–¥"],
        "websites": ["–æ—Ç–∫—Ä–æ–π youtube", "–æ—Ç–∫—Ä–æ–π github"],
        "system": ["–∑–∞–±–ª–æ–∫–∏—Ä—É–π —ç–∫—Ä–∞–Ω", "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏"],
        "music": ["–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É", "–ø–∞—É–∑–∞"],
        "assistant_control": ["–≤—ã–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥—ã", "–≤–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥—ã"]
    }
    
    missing_commands = []
    
    for category, expected_commands in important_commands.items():
        if category not in commands:
            missing_commands.extend([f"{category}: {cmd}" for cmd in expected_commands])
            continue
            
        for cmd in expected_commands:
            if cmd not in commands[category]:
                missing_commands.append(f"{category}: {cmd}")
    
    if missing_commands:
        print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for cmd in missing_commands:
            print(f"  {cmd}")
        return False
    else:
        print("‚úÖ –í—Å–µ –≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def test_command_descriptions(commands: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥...")
    
    empty_descriptions = []
    
    for category, category_commands in commands.items():
        for command, data in category_commands.items():
            description = data.get("description", "")
            if not description or description.strip() == "":
                empty_descriptions.append(f"{category}: {command}")
    
    if empty_descriptions:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π:")
        for cmd in empty_descriptions:
            print(f"  {cmd}")
        return False
    else:
        print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        return True

def test_duplicate_commands(commands: Dict[str, Any]) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...")
    
    all_commands = []
    duplicates = []
    
    for category, category_commands in commands.items():
        for command in category_commands.keys():
            if command in all_commands:
                duplicates.append(command)
            all_commands.append(command)
    
    if duplicates:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã:")
        for cmd in set(duplicates):
            print(f"  {cmd}")
        return False
    else:
        print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True

def generate_command_summary(commands: Dict[str, Any]):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
    
    total_commands = 0
    for category, category_commands in commands.items():
        count = len(category_commands)
        total_commands += count
        print(f"  üìÇ {category}: {count} –∫–æ–º–∞–Ω–¥")
    
    print(f"\nüéØ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
    for category, category_commands in list(commands.items())[:3]:
        print(f"  üìÇ {category}:")
        for i, (cmd, data) in enumerate(list(category_commands.items())[:2]):
            action = data.get("action", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"    ‚Ä¢ {cmd} ‚Üí {action}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    commands = load_commands()
    if not commands:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_command_structure,
        test_specific_commands,
        test_command_descriptions,
        test_duplicate_commands
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test in tests:
        if test(commands):
            passed_tests += 1
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    generate_command_summary(commands)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 