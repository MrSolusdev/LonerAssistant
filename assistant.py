import speech_recognition as sr
import psutil
import os
import pyautogui
import time
from datetime import datetime
import threading
import subprocess
import platform
import pygame
import pyttsx3
import re
import json
import sys
import signal

def load_commands():
    """Load commands from JSON file"""
    try:
        with open('commands.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("–§–∞–π–ª commands.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")
        sys.stdout.flush()
        return {}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        sys.stdout.flush()
        return {}

success_sound = os.path.abspath("success.wav")
error_sound = os.path.abspath("error.wav")

try:
    pygame.mixer.init()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pygame mixer: {e}")
    sys.stdout.flush()

def play_success():
    try:
        if os.path.exists(success_sound):
            pygame.mixer.Sound(success_sound).play()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É—Å–ø–µ—Ö–∞: {e}")
        sys.stdout.flush()

def play_error():
    try:
        if os.path.exists(error_sound):
            pygame.mixer.Sound(error_sound).play()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏: {e}")
        sys.stdout.flush()

try:
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    russian_voice = None
    for voice in voices:
        if 'russian' in voice.name.lower() or 'milena' in voice.name.lower():
            russian_voice = voice.id
            break
    if russian_voice:
        engine.setProperty('voice', russian_voice)
    else:
        if voices:
            engine.setProperty('voice', voices[0].id)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
    sys.stdout.flush()
    engine = None

def say(text):
    print(f"üó£Ô∏è {text}")
    sys.stdout.flush()
    try:
        if engine:
            engine.say(text)
            engine.runAndWait()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        sys.stdout.flush()

commands_enabled = True
recording_note = False
note_lines = []
screen_recording = False
recording_process = None

def kill_process(name):
    found = False
    try:
        for proc in psutil.process_iter(['name']):
            if name.lower() in proc.info['name'].lower():
                proc.kill()
                found = True
        if found:
            play_success()
        else:
            play_error()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {name}: {e}")
        sys.stdout.flush()
        play_error()

def open_app(app_name):
    try:
        os.system(f"open -a '{app_name}'")
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_name}: {e}")
        sys.stdout.flush()
        play_error()

def open_url(url):
    """Open URL in browser"""
    try:
        os.system(f"open '{url}'")
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ URL {url}: {e}")
        sys.stdout.flush()
        play_error()

def system_command(command):
    """Execute system command"""
    try:
        os.system(command)
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        sys.stdout.flush()
        play_error()

def move_mouse():
    try:
        pyautogui.move(100, 0, duration=0.5)
        pyautogui.move(-100, 0, duration=0.5)
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏: {e}")
        sys.stdout.flush()
        play_error()

def click_mouse():
    try:
        pyautogui.click()
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –º—ã—à–∏: {e}")
        sys.stdout.flush()
        play_error()

def close_all(name):
    count = 0
    try:
        for proc in psutil.process_iter(['name']):
            if name.lower() in proc.info['name'].lower():
                proc.kill()
                count += 1
        if count:
            play_success()
        else:
            play_error()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {name}: {e}")
        sys.stdout.flush()
        play_error()

def take_screenshot():
    try:
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filepath = os.path.expanduser(f"~/Desktop/screenshot_{now}.png")
        screenshot = pyautogui.screenshot()
        screenshot.save(filepath)
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        sys.stdout.flush()
        play_error()

def focus_mode():
    """Enable focus mode - close distracting applications"""
    try:
        for app in ["Telegram", "Discord", "Messages"]:
            kill_process(app)
        open_app("Visual Studio Code")
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ñ–æ–∫—É—Å–∞: {e}")
        sys.stdout.flush()
        play_error()

def append_note(text):
    global note_lines
    note_lines.append(text)

def save_note():
    global note_lines
    try:
        if note_lines:
            path = os.path.expanduser("~/Desktop/voice_note.txt")
            with open(path, 'a', encoding='utf-8') as f:
                f.write(f"{datetime.now()}\n" + "\n".join(note_lines) + "\n\n")
            note_lines = []
            play_success()
        else:
            play_error()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        sys.stdout.flush()
        play_error()

def cancel_note():
    global note_lines
    note_lines.clear()
    play_success()

def timer_5_minutes():
    """Set timer for 5 minutes"""
    try:
        say("–¢–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        def timer_callback():
            time.sleep(300)
            say("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –¢–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        threading.Thread(target=timer_callback, daemon=True).start()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        sys.stdout.flush()
        play_error()

def timer_10_minutes():
    """Set timer for 10 minutes"""
    try:
        say("–¢–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        def timer_callback():
            time.sleep(600)
            say("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –¢–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        threading.Thread(target=timer_callback, daemon=True).start()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        sys.stdout.flush()
        play_error()

def timer_30_minutes():
    """Set timer for 30 minutes"""
    try:
        say("–¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        def timer_callback():
            time.sleep(1800)
            say("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        threading.Thread(target=timer_callback, daemon=True).start()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        sys.stdout.flush()
        play_error()

FUNCTION_MAP = {
    "open_app": open_app,
    "kill_process": kill_process,
    "open_url": open_url,
    "system_command": system_command,
    "move_mouse": move_mouse,
    "click_mouse": click_mouse,
    "take_screenshot": take_screenshot,
    "focus_mode": focus_mode,
    "say": say,
    "disable_commands": lambda: disable_commands(),
    "enable_commands": lambda: enable_commands(),
    "timer_5_minutes": timer_5_minutes,
    "timer_10_minutes": timer_10_minutes,
    "timer_30_minutes": timer_30_minutes
}

def disable_commands():
    global commands_enabled
    commands_enabled = False
    play_success()

def enable_commands():
    global commands_enabled
    commands_enabled = True
    play_success()

def disable_commands_for(duration, unit):
    global commands_enabled
    commands_enabled = False
    play_success()
    seconds = duration
    if unit.startswith('–º–∏–Ω'):
        seconds *= 60
    elif unit.startswith('—á–∞—Å'):
        seconds *= 3600
    def reenable():
        global commands_enabled
        time.sleep(seconds)
        commands_enabled = True
        play_success()
    threading.Thread(target=reenable, daemon=True).start()

def click_mouse_times(times):
    try:
        for _ in range(times):
            pyautogui.click()
            time.sleep(0.1)
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –º—ã—à–∏ {times} —Ä–∞–∑: {e}")
        sys.stdout.flush()
        play_error()

def move_mouse_direction(direction, pixels):
    try:
        dx, dy = 0, 0
        if direction == '–≤–≤–µ—Ä—Ö':
            dy = -pixels
        elif direction == '–≤–Ω–∏–∑':
            dy = pixels
        elif direction == '–≤–ª–µ–≤–æ':
            dx = -pixels
        elif direction == '–≤–ø—Ä–∞–≤–æ':
            dx = pixels
        pyautogui.move(dx, dy, duration=0.5)
        play_success()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏: {e}")
        sys.stdout.flush()
        play_error()

def execute_command(command_data):
    """Execute command based on JSON data"""
    try:
        action = command_data.get("action")
        params = command_data.get("params", [])
        
        if action in FUNCTION_MAP:
            func = FUNCTION_MAP[action]
            if params:
                func(*params)
            else:
                func()
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            sys.stdout.flush()
            play_error()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        sys.stdout.flush()
        play_error()

def recognize_command():
    global recording_note, commands_enabled
    
    commands_data = load_commands()
    
    try:
        r = sr.Recognizer()
        with sr.Microphone() as source:
            print("–°–ª—É—à–∞—é...")
            sys.stdout.flush()
            audio = r.listen(source)
        try:
            text = r.recognize_google(audio, language="ru-RU").lower()
            print(f"–¢—ã —Å–∫–∞–∑–∞–ª: {text}")
            sys.stdout.flush()

            if recording_note:
                if "—Å–æ—Ö—Ä–∞–Ω–∏ –∑–∞–º–µ—Ç–∫—É" in text:
                    save_note()
                    recording_note = False
                    return
                elif "—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É" in text:
                    cancel_note()
                    recording_note = False
                    return
                else:
                    append_note(text)
                    return

            if "–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É" in text:
                recording_note = True
                note_lines.clear()
                play_success()
                return

            for category, commands in commands_data.items():
                for cmd_phrase, cmd_data in commands.items():
                    if cmd_phrase in text:
                        if category == "assistant_control":
                            execute_command(cmd_data)
                            return
                        
                        if cmd_phrase == "–≤–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥—ã":
                            execute_command(cmd_data)
                            return

                        if not commands_enabled:
                            print("–ö–æ–º–∞–Ω–¥—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
                            sys.stdout.flush()
                            return
                        
                        execute_command(cmd_data)
                        return

            m = re.search(r"–≤—ã–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ (\d+) (—Å–µ–∫—É–Ω–¥[—É—ã]?|–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å[–∞–æ–≤]?)", text)
            if m:
                duration = int(m.group(1))
                unit = m.group(2)
                disable_commands_for(duration, unit)
                return
            m = re.search(r"–∫–ª–∏–∫–Ω–∏ (\d+) —Ä–∞–∑", text)
            if m:
                times = int(m.group(1))
                click_mouse_times(times)
                return
            m = re.search(r"–ø–æ—à–µ–≤–µ–ª–∏ –º—ã—à–∫–æ–π (–≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑|–≤–ª–µ–≤–æ|–≤–ø—Ä–∞–≤–æ) (\d+) –ø–∏–∫—Å–µ–ª[–µ—è–π]", text)
            if m:
                direction = m.group(1)
                pixels = int(m.group(2))
                move_mouse_direction(direction, pixels)
                return

            if not commands_enabled:
                print("–ö–æ–º–∞–Ω–¥—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
                sys.stdout.flush()
                return

            play_error()
        except sr.UnknownValueError:
            play_error()
        except sr.RequestError as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            sys.stdout.flush()
            play_error()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º: {e}")
        sys.stdout.flush()
        play_error()

def signal_handler(signum, frame):
    """Signal handler for graceful shutdown"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    sys.stdout.flush()
    print("üëã –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.stdout.flush()
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    print("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
    sys.stdout.flush()
    print("–°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...")
    sys.stdout.flush()
    
    commands_data = load_commands()
    if commands_data:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(commands) for commands in commands_data.values())} –∫–æ–º–∞–Ω–¥ –∏–∑ JSON —Ñ–∞–π–ª–∞")
        sys.stdout.flush()
    else:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞")
        sys.stdout.flush()
    
    while True:
        try:
            recognize_command()
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.stdout.flush()
            break
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.stdout.flush()
            time.sleep(1)
